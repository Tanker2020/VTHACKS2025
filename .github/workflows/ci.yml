name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # ---------------------- scan_ruby ----------------------
  scan_ruby:
    name: scan_ruby
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Locate Rails app dir
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          for d in backend/railsApp backend/rails railsApp rails; do
            if [ -f "$d/Gemfile" ]; then
              echo "APP_DIR=$d" >> "$GITHUB_ENV"
              echo "Found Rails at: $d"
              exit 0
            fi
          done
          echo "❌ Could not find Rails app directory." >&2
          exit 1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.6'
          bundler-cache: false

      - name: Install gems
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Brakeman (Rails security scan)
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle exec bin/brakeman --no-pager

  # ---------------------- scan_js ----------------------
  scan_js:
    name: scan_js
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Locate Rails app dir
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          for d in backend/railsApp backend/rails railsApp rails; do
            if [ -f "$d/Gemfile" ]; then
              echo "APP_DIR=$d" >> "$GITHUB_ENV"
              echo "Found Rails at: $d"
              exit 0
            fi
          done
          echo "❌ Could not find Rails app directory." >&2
          exit 1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.6'
          bundler-cache: false

      - name: Install gems
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Importmap audit (JS deps)
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle exec bin/importmap audit

  # ------------------------ lint -----------------------
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Locate Rails app dir
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          for d in backend/railsApp backend/rails railsApp rails; do
            if [ -f "$d/Gemfile" ]; then
              echo "APP_DIR=$d" >> "$GITHUB_ENV"
              echo "Found Rails at: $d"
              exit 0
            fi
          done
          echo "❌ Could not find Rails app directory." >&2
          exit 1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.6'
          bundler-cache: false

      - name: Install gems
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Rubocop
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle exec bin/rubocop -f github

  # ------------------------ test -----------------------
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Locate Rails app dir
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          for d in backend/railsApp backend/rails railsApp rails; do
            if [ -f "$d/Gemfile" ]; then
              echo "APP_DIR=$d" >> "$GITHUB_ENV"
              echo "Found Rails at: $d"
              exit 0
            fi
          done
          echo "❌ Could not find Rails app directory." >&2
          exit 1

      - name: Configure Docker auth if provided
        shell: bash
        env:
          DOCKER_AUTH_CONFIG: ${{ secrets.DOCKER_AUTH_CONFIG }}
        run: |
          set -euo pipefail
          if [ -n "${DOCKER_AUTH_CONFIG:-}" ]; then
            mkdir -p "$HOME/.docker"
            printf '%s' "$DOCKER_AUTH_CONFIG" > "$HOME/.docker/config.json"
            echo "Wrote Docker auth config"
          else
            echo "No DOCKER_AUTH_CONFIG provided; skipping docker auth setup"
          fi

      - name: Attempt to pull & start Postgres/Redis services (graceful)
        id: start-services
        shell: bash
        run: |
          set -euo pipefail
          echo "SKIP_SERVICES=true" >> "$GITHUB_ENV"
          if ! command -v docker >/dev/null 2>&1; then
            echo "docker not available; skipping service container startup"
            exit 0
          fi

          if ! docker pull postgres:16-alpine >/dev/null 2>&1; then
            echo "Failed to pull postgres:16-alpine (auth or rate limit). Will skip services."
            exit 0
          fi

          if ! docker pull redis:7-alpine >/dev/null 2>&1; then
            echo "Failed to pull redis:7-alpine (auth or rate limit). Will skip services."
            exit 0
          fi

          docker run -d --name ci_postgres -e POSTGRES_USER=rails -e POSTGRES_PASSWORD=rails -e POSTGRES_DB=app_test -p 5432:5432 postgres:16-alpine
          for i in $(seq 1 30); do
            if docker exec ci_postgres pg_isready -U rails -d app_test >/dev/null 2>&1; then
              echo "Postgres is ready"
              break
            fi
            sleep 1
          done

          docker run -d --name ci_redis -p 6379:6379 redis:7-alpine
          for i in $(seq 1 30); do
            if docker exec ci_redis redis-cli ping >/dev/null 2>&1; then
              echo "Redis is ready"
              break
            fi
            sleep 1
          done

          echo "SKIP_SERVICES=false" >> "$GITHUB_ENV"
          echo "Services started locally for CI."

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.6'
          bundler-cache: false

      - name: Install gems
        shell: bash
        run: |
          cd "$APP_DIR"
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Prepare test DB (create/migrate & ensure schema.rb exists)
        shell: bash
        run: |
          set -euo pipefail
          cd "$APP_DIR"
          if [ "${SKIP_SERVICES:-true}" = "true" ]; then
            echo "Services unavailable; falling back to SQLite for tests."
            export DATABASE_URL="sqlite3:db/test.sqlite3"
            export REDIS_URL=""
          else
            export DATABASE_URL="postgres://rails:rails@localhost:5432/app_test"
            export REDIS_URL="redis://localhost:6379/0"
          fi
          export RAILS_ENV=test
          bundle exec rails db:prepare || true
          if [ ! -f db/schema.rb ]; then
            echo "No schema.rb yet; dumping empty schema."
            bundle exec rails db:schema:dump
          fi

      - name: Run tests
        shell: bash
        run: |
          cd "$APP_DIR"
          if [ "${SKIP_SERVICES:-true}" = "true" ]; then
            echo "Running tests with fallback DB (SQLite). Some integration tests may be skipped or behave differently."
            export DATABASE_URL="sqlite3:db/test.sqlite3"
            export REDIS_URL=""
          else
            export DATABASE_URL="postgres://rails:rails@localhost:5432/app_test"
            export REDIS_URL="redis://localhost:6379/0"
          fi
          export RAILS_ENV=test
          bundle exec rails test