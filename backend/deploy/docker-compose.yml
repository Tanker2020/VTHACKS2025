services:
  rails:
    image: ${IMAGE_NS}/rails:${TAG:-prod}
    # Use the application-specific env file in the railsApp folder. This file
    # contains RAILS_MASTER_KEY, SUPABASE keys, RECEIVE_PASSWORD and SHARED_SECRET
    env_file: ../railsApp/.env.production
    environment:
      # split redis DBs
      REDIS_CACHE_URL: redis://redis:6379/0
      REDIS_SIDEKIQ_URL: redis://redis:6379/1
      REDIS_CABLE_URL: redis://redis:6379/2
      # optional: keep a generic var if your code uses it
      REDIS_URL: redis://redis:6379/1
    ports:
      - "127.0.0.1:3000:3000"     # only local; nginx proxies to this
    # Ensure the python agent and redis are available before starting Rails.
    depends_on:
      agent:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/up"]
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: always
    # pull_policy: always   # keep only if your Compose supports it

  worker:
    image: ${IMAGE_NS}/rails:${TAG:-prod}
    command: bundle exec sidekiq
    env_file: /home/opc/srv/myapp/.env
    environment:
      REDIS_SIDEKIQ_URL: redis://redis:6379/1
      # if your sidekiq initializer reads REDIS_URL, also set:
      REDIS_URL: redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      # sidekiq exposes a TSTP signal check poorly; simplest is process alive:
      test: ["CMD-SHELL", "ps aux | grep '[s]idekiq' > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 20s

  agent:
    image: ${IMAGE_NS}/agent:${TAG:-prod}
    # Use the same env file so agent and rails share secrets like SHARED_SECRET
    env_file: ../railsApp/.env.production
    environment:
      REDIS_URL: redis://redis:6379/1
      # Let Rails reach the agent at this service name inside compose network.
      ORACLE_URL: http://agent:5000/compute_and_send
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      # agent should expose a small health endpoint (e.g. /health) on port 5000
      test: ["CMD", "curl", "-fsS", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    restart: always
    # healthcheck:
    #   test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 20s

  redis:
    image: redis:7-alpine
    # No external port in prod; keep it internal-only
    # ports:
    #   - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -u redis://redis:6379 ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s