// Centralized mock "databases" for local development

const List<Map<String, dynamic>> mockUsers = [
  {
    'id': 'user-1000',
    'username': 'alice',
    'display_name': 'Alice M',
    'bio': 'Builder of small predictions and careful lender.',
    'followers': 120,
    'following': 34,
    'nashScore': 84,
  },
  {
    'id': 'user-1001',
    'username': 'bob',
    'display_name': 'Bob J',
    'bio': 'Data scientist and avid contributor.',
    'followers': 54,
    'following': 12,
    'nashScore': 66,
  },
  {
    'id': 'user-1002',
    'username': 'carla',
    'display_name': 'Carla P',
    'bio': 'Community organizer and borrower.',
    'followers': 240,
    'following': 88,
    'nashScore': 92,
  },
  {
    'id': 'user-1003',
    'username': 'dan',
    'display_name': 'Dan K',
    'bio': 'Occasional predictor and lender.',
    'followers': 18,
    'following': 6,
    'nashScore': 48,
  },
  {
    'id': 'user-1004',
    'username': 'eve',
    'display_name': 'Eve R',
    'bio': 'Startup founder, needs bridge loans.',
    'followers': 310,
    'following': 110,
    'nashScore': 95,
  },
  {
    'id': 'user-1005',
    'username': 'frank',
    'display_name': 'Frank L',
    'bio': 'Hobbyist predictor.',
    'followers': 8,
    'following': 2,
    'nashScore': 40,
  },
];

const List<Map<String, dynamic>> mockAssets = [
  // Loans
  {
    'id': 1,
    'type': 'loan',
    'title': 'Loan Request — Community Garden',
    'price': '500.00',
    'category': 'Open Loans',
    'loan_total': 500.0,
    'loan_raised': 150.0,
    'loan_rate': 5.0,
    'loan_duration_months': 6,
    'borrower_id': 'user-1000',
  },
  {
    'id': 2,
    'type': 'loan',
    'title': 'Loan Request — App Hosting',
    'price': '800.00',
    'category': 'Open Loans',
    'loan_total': 800.0,
    'loan_raised': 320.0,
    'loan_rate': 7.5,
    'loan_duration_months': 12,
    'borrower_id': 'user-1004',
  },
  {
    'id': 3,
    'type': 'loan',
    'title': 'Loan Request — Market Research',
    'price': '350.00',
    'category': 'Open Loans',
    'loan_total': 350.0,
    'loan_raised': 50.0,
    'loan_rate': 6.0,
    'loan_duration_months': 9,
    'borrower_id': 'user-1002',
  },
  // Predictions
  {
    'id': 4,
    'type': 'prediction',
    'title': 'Prediction — BTC Price Surge',
    'price': '9.99',
    'category': 'Predictions',
    'borrower_id': null,
  },
  {
    'id': 5,
    'type': 'prediction',
    'title': 'Prediction — Election Outcome',
    'price': '12.00',
    'category': 'Predictions',
    'borrower_id': null,
  },
  // Mixed
  {
    'id': 6,
    'type': 'loan',
    'title': 'Loan Request — Seed Funding',
    'price': '1200.00',
    'category': 'Open Loans',
    'loan_total': 1200.0,
    'loan_raised': 600.0,
    'loan_rate': 8.0,
    'loan_duration_months': 18,
    'borrower_id': 'user-1001',
  },
  {
    'id': 7,
    'type': 'prediction',
    'title': 'Prediction — Sports Upset',
    'price': '4.50',
    'category': 'Other',
    'borrower_id': null,
  },
  {
    'id': 8,
    'type': 'loan',
    'title': 'Loan Request — Equipment',
    'price': '950.00',
    'category': 'Open Loans',
    'loan_total': 950.0,
    'loan_raised': 200.0,
    'loan_rate': 6.5,
    'loan_duration_months': 10,
    'borrower_id': 'user-1003',
  },
  {
    'id': 9,
    'type': 'prediction',
    'title': 'Prediction — Tech Adoption',
    'price': '7.25',
    'category': 'Predictions',
    'borrower_id': null,
  },
  {
    'id': 10,
    'type': 'loan',
    'title': 'Loan Request — Expansion',
    'price': '2200.00',
    'category': 'Open Loans',
    'loan_total': 2200.0,
    'loan_raised': 1800.0,
    'loan_rate': 9.0,
    'loan_duration_months': 24,
    'borrower_id': 'user-1004',
  },
  {
    'id': 11,
    'type': 'prediction',
    'title': 'Prediction — Weather Event',
    'price': '3.99',
    'category': 'Other',
    'borrower_id': null,
  },
  {
    'id': 12,
    'type': 'loan',
    'title': 'Loan Request — Community Event',
    'price': '400.00',
    'category': 'Open Loans',
    'loan_total': 400.0,
    'loan_raised': 100.0,
    'loan_rate': 4.5,
    'loan_duration_months': 6,
    'borrower_id': 'user-1000',
  },
];

Map<String, dynamic>? findUserById(String id) {
  // id is non-nullable; return null if no user found
  final found = mockUsers.firstWhere((u) => u['id'] == id, orElse: () => {});
  if (found.isEmpty) return null;
  return found;
}
